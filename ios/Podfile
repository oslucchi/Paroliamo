# React Native 0.72.x style Podfile â€” Flipper disabled, Hermes on, Xcode 16 fixes

require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '12.4'
prepare_react_native_project!

# Disable Flipper on iOS entirely (most stable with Xcode 16)
ENV['RCT_NO_FLIPPER'] = '1'

# Optional frameworks mode (set USE_FRAMEWORKS=static|dynamic if you need it)
linkage = ENV['USE_FRAMEWORKS']
use_frameworks! :linkage => linkage.to_sym if linkage

target 'Paroliamo' do
  config = use_native_modules!

  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,      # keep Hermes
    :fabric_enabled => false,     # old architecture unless you've migrated
    :flipper_configuration => FlipperConfiguration.disabled,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'ParoliamoTests' do
    inherit! :complete
  end

  post_install do |installer|
    # Standard RN post-install
    react_native_post_install(installer)

    # Normalize deployment target & add Folly clock_gettime fixes
    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |bc|
        # 1) Bump any old pods to iOS 12.4 to silence warnings
        min_target = '12.4'
        cur = bc.build_settings['IPHONEOS_DEPLOYMENT_TARGET']
        if cur.nil? || cur.to_f < min_target.to_f
          bc.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = min_target
        end

        # 2) Fix Xcode 16 + iOS 18 SDK conflict in RCT-Folly
        # Ensure Folly treats clock_gettime as available (prevents redefining clockid_t & CLOCK_* macros)
        if t.name == 'RCT-Folly'
          defs = bc.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] || ['$(inherited)']
          ['HAVE_CLOCK_GETTIME=1', 'FOLLY_HAVE_CLOCK_GETTIME=1'].each do |d|
            defs << d unless defs.include?(d)
          end
          bc.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = defs
        end
      end
    end
  end
end

